[{"/home/andreia/Documents/SINF2O2O/fe/src/Components/Layout.js":"1","/home/andreia/Documents/SINF2O2O/fe/src/Pages/CreateOrder.js":"2","/home/andreia/Documents/SINF2O2O/fe/src/Pages/Transactions.js":"3","/home/andreia/Documents/SINF2O2O/fe/src/index.js":"4","/home/andreia/Documents/SINF2O2O/fe/src/Pages/MainPage.js":"5","/home/andreia/Documents/SINF2O2O/fe/src/Pages/Inventory.js":"6"},{"size":443,"mtime":1607020205617,"results":"7","hashOfConfig":"8"},{"size":9485,"mtime":1607708766062,"results":"9","hashOfConfig":"8"},{"size":5903,"mtime":1607830071679,"results":"10","hashOfConfig":"8"},{"size":927,"mtime":1607710769131,"results":"11","hashOfConfig":"8"},{"size":1024,"mtime":1607822750699,"results":"12","hashOfConfig":"8"},{"size":1306,"mtime":1607020205621,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"3tclqx",{"filePath":"16","messages":"17","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/andreia/Documents/SINF2O2O/fe/src/Components/Layout.js",[],"/home/andreia/Documents/SINF2O2O/fe/src/Pages/CreateOrder.js",["27","28"],"import React from 'react';\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Button from '@material-ui/core/Button';\nimport \"../CSS/CreateOrder.css\";\nimport { Container } from \"react-bootstrap\";\nimport Select from \"@material-ui/core/Select\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Form from 'react-bootstrap/Form'\nimport { Col, Row } from \"react-bootstrap\";\nimport { Component } from \"react\";\nimport FormControl from '@material-ui/core/FormControl';\nimport axios from 'axios';\n\n\n\nconst StyledTableCell = withStyles((theme) => ({\n  head: {\n    backgroundColor: theme.palette.common.black,\n    color: theme.palette.common.white,\n  },\n  body: {\n    fontSize: 14,\n  },\n}))(TableCell);\n\nconst StyledTableRow = withStyles((theme) => ({\n  root: {\n    \"&:nth-of-type(odd)\": {\n      backgroundColor: theme.palette.action.white,\n    },\n  },\n}))(TableRow);\n\n\nclass CreateOrder extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      company: \"loles\",\n      name: \"hai\",\n      isLoading: true,\n      data: []\n    };\n    this.selectedCheckboxes = new Set();\n\n  }\n\n  componentDidMount() {\n    const requestOptions = {\n      method: 'GET',\n    };\n\n    fetch('http://localhost:5000/transaction/salesitems', requestOptions)\n      .then((res) => (res.clone().text()))\n      .then((res) => (this.setState((prevState) => ({\n        isLoading: !prevState.isLoading,\n        data: JSON.parse(res).result\n      }))));\n\n  }\n\n\n  render() {\n\n    const handleChange = (event) => {\n      this.setState({\n        name: this.state.name,\n        steps: this.state.itemsForm,\n        open: false,\n        value: '',\n        supplier: ''\n      });\n    };\n    const handleClickOpen = () => {\n      this.setState({ open: true });\n    };\n\n    const handleClose = () => {\n      this.selectedCheckboxes.clear();\n      this.setState({ open: false });\n    };\n\n    const handleSave = () => {\n      console.log(this.selectedCheckboxes);\n      this.setState({ open: false });\n    };\n\n    const handleSubmit = async (event) => {\n      event.preventDefault();\n      console.log(\"TOU AQUIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\");\n      const requestOptions = {\n        method: 'POST',\n      };\n      try {\n        await axios.post('http://localhost:5000/transaction/createorder', requestOptions);\n      } catch (error) {\n        return error;\n      }\n\n\n    }\n\n\n    const toggleCheckbox = id => {\n      if (this.selectedCheckboxes.has(id.target.id)) {\n        this.selectedCheckboxes.delete(id.target.id);\n      } else {\n        this.selectedCheckboxes.add(id.target.id);\n      }\n    };\n\n\n    const onChange = e => {\n      //replace non-digits with blank\n      const value = e.target.value.replace(/[^\\d]/, '');\n\n      if (parseInt(value) !== 0) {\n        this.setState({ value });\n      }\n    };\n\n\n    /*   submitHandler = (event) => {\n        event.preventDefault();\n        \n      } */\n\n\n    if (this.state.isLoading) {\n      return (\n        <h1>I am loading</h1>\n      );\n    } else {\n      console.log(this.state.data)\n      return (\n        <Container id=\"container\">\n          <Button id=\"createOrder-label\" disabled={true} variant=\"contained\">Create Order</Button>\n          <Button href=\"Transactions\" id=\"cancel\" variant=\"contained\">Cancel</Button>\n          <Form /* onSubmit ={this.submitHandler}  */ onSubmit={handleSubmit} id=\"form\">\n            <Form.Group id=\"row\" as={Row} controlId=\"formPlaintextEmail\">\n              <Form.Label column sm=\"2\">Supplier</Form.Label>\n              <Col sm=\"10\">\n                <Select\n                  native\n                  //value={state.company}------------------------------todo, onde guardar\n                  onChange={handleChange}\n                  inputProps={{\n                    name: \"company\",\n                    id: \"filled-company-native-simple\",\n                  }}\n                >\n                  <option aria-label=\"None\" value=\"\" />\n                  <option value={this.state.supplier}> SINF </option>\n                </Select>\n              </Col>\n            </Form.Group>\n\n            <Form.Group id=\"rowproduct\" as={Row} controlId=\"formPlaintextPassword\">\n              <Form.Label column sm=\"2\">\n                Product\n            </Form.Label>\n              <Col sm=\"10\">\n                <Button id=\"label\" onClick={handleClickOpen}> Select your Product </Button>\n              </Col>\n            </Form.Group>\n            <Grid container spacing={3}>\n\n\n              <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={this.state.open}>\n                <DialogTitle> Select your Product </DialogTitle>\n\n                <DialogContent>\n                  <Table aria-label=\"customized table\">\n                    <TableBody>\n                      <Table aria-label=\"customized table\">\n                        <TableHead>\n                          <TableRow>\n                            <StyledTableCell id=\"header1\"> </StyledTableCell>\n                            <StyledTableCell id=\"header\" align=\"center\">\n                              Product Name\n          </StyledTableCell>\n                            <StyledTableCell id=\"header\" align=\"center\"> Description </StyledTableCell>\n                            <StyledTableCell id=\"header\" align=\"center\"> Value/Un    </StyledTableCell>\n                          </TableRow>\n                        </TableHead>\n                        <TableBody>\n                          {this.state.data.filter(aux => aux.itemKey != \"PORTES\").map((items) => {\n                            var item = items.itemKey;\n                            var description = items.description;\n                            var value = items.priceListLines[0].priceAmount.amount + ' ' + items.priceListLines[0].priceAmount.symbol;\n                            /* console.log(item, value, description); */\n                            return (\n                              <StyledTableRow key={item}>\n                                <StyledTableCell id=\"check\">\n                                  <FormControl component=\"fieldset\">\n                                    <Checkbox\n                                      id={item}\n                                      color=\"\"\n                                      inputProps={{ \"aria-label\": \"checkbox\" }}\n                                      value={{ item }}\n                                      onChange={toggleCheckbox}\n                                      defaultChecked={this.selectedCheckboxes.has(items.itemKey)}\n                                    />\n                                  </FormControl>\n                                </StyledTableCell>\n                                <StyledTableCell id=\"products\" align=\"center\">\n                                  {item}\n                                </StyledTableCell>\n                                <StyledTableCell id=\"products\" align=\"center\">\n                                  {description}\n                                </StyledTableCell>\n                                <StyledTableCell id=\"products\" align=\"center\">\n                                  {value}\n                                </StyledTableCell>\n                              </StyledTableRow>\n                            )\n                          })}\n                        </TableBody>\n                      </Table >\n                    </TableBody>\n                  </Table>\n                </DialogContent>\n\n                <DialogActions>\n                  <Button autoFocus onClick={handleClose} color=\"\">\n                    Cancel\n          </Button>\n                  <Button autoFocus onClick={handleSave} color=\"\">\n                    Save\n          </Button>\n                </DialogActions>\n              </Dialog>\n\n            </Grid>\n            <Form.Group id=\"row\" as={Row} controlId=\"formPlaintextPassword\">\n              <Form.Label column sm=\"2\">\n                Quantity\n            </Form.Label>\n              <Col sm=\"10\">\n                <TextField\n                  id=\"outlined-number\"\n                  label=\"Number\"\n                  type=\"number\"\n                  value={this.state.value}\n                  onChange={onChange}\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                  variant=\"outlined\"\n                />        </Col>\n            </Form.Group>\n\n            <Form.Group id=\"row\" as={Row} controlId=\"formPlaintextPassword\">\n              <Form.Label column sm=\"2\">\n                Total\n            </Form.Label>\n              <Col sm=\"10\">\n                <Button id=\"label\" disabled={true} variant=\"contained\">Total</Button>\n              </Col>\n            </Form.Group>\n            <Button id=\"submit\" type=\"submit\" variant=\"contained\">Submit</Button>\n          </Form>\n\n\n        </Container>\n      );\n\n    }\n  }\n}\n\nexport default CreateOrder;","/home/andreia/Documents/SINF2O2O/fe/src/Pages/Transactions.js",[],"/home/andreia/Documents/SINF2O2O/fe/src/index.js",[],"/home/andreia/Documents/SINF2O2O/fe/src/Pages/MainPage.js",[],"/home/andreia/Documents/SINF2O2O/fe/src/Pages/Inventory.js",[],{"ruleId":"29","severity":1,"message":"30","line":2,"column":22,"nodeType":"31","messageId":"32","endLine":2,"endColumn":32},{"ruleId":"33","severity":1,"message":"34","line":199,"column":70,"nodeType":"35","messageId":"36","endLine":199,"endColumn":72},"no-unused-vars","'makeStyles' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected"]